// Copyright : ETH Zurich
// License   : three-clause BSD license
// Authors   : Witold Wolski
// for full text refer to files: LICENSE, AUTHORS and COPYRIGHT



#include <boost/program_options.hpp>
#include <boost/filesystem.hpp>
#include <fstream>

namespace b_po = boost::program_options;
namespace b_fs = boost::filesystem;

/*!
\brief parses the command line arguments using boost::program_options
*/

struct AnalysisParameters
{
  std::vector<std::string> infile;
  double resolution; // with of mz bins in ppms
  uint32_t rtresolution; // retention time width in pixel
  uint32_t mzresolution; // mz with in pixel
  bool visual; // should result be visualized
  double minmass; // minimal mass to consider
  std::string outdir;
};

void analysisParameters(AnalysisParameters & ap, b_po::variables_map & vmgeneral){
  if(vmgeneral.count("in"))
    {
      ap.infile =  vmgeneral["in"].as<std::vector<std::string> >();
    }
  else{
      std::cerr << "in file argument is required" << std::endl;
      return;
    }

  if(vmgeneral.count("out"))
    {
      ap.outdir =  vmgeneral["out"].as<std::string>();
    }
  else{
      std::cerr << "out directory is required" << std::endl;
      boost::filesystem::path p(ap.infile[0]);
      ap.outdir = p.parent_path().string();
    }
  ap.resolution =vmgeneral["resolution"].as<float>();
  ap.rtresolution = vmgeneral["width-RT"].as<unsigned int>();
  ap.mzresolution = vmgeneral["width-MZ"].as<unsigned int>();
  ap.visual = false;
  if(vmgeneral.count("visual")){
      ap.visual = true;
    }
  ap.minmass = vmgeneral["minMass"].as<double>();
}


int parsecommandline(
    int ac,
    char* av[],
    b_po::variables_map & vmgeneral
    )
{
  try
  {
    b_po::options_description general("File Handling:");
    general.add_options()
        ("help,H", "produce help message")
        ("version,V", "produces version information")
        ("in,I", b_po::value<std::vector<std::string> >(), "input file")
        ("out, O", b_po::value<std::vector<std::string> >(), "output directory (more than single file is written).")
        ("config-file,I", b_po::value<std::string>(), "configuration file")
        ("visual,v", "visual default true");

    b_po::options_description processing("Processing Options:");
    processing.add_options()
        ("resolution",b_po::value<float>()->default_value(50000.),
         "instrument resolution - default 50000.")
        ("width-RT", b_po::value<unsigned int>()->default_value(9),
         "width of RT peak in pixel, if width == 0  do not filter")
        ("width-MZ", b_po::value<unsigned int>()->default_value(9),
         "width of MZ peak in pixel, if width == 0  do not filter (todo remove this parameter!")
        ("minMass",b_po::value<double>()->default_value(300.), "minimum mass in MS1 to consider");

    b_po::options_description cmdloptions;
    cmdloptions.add(general).add(processing);//.add(transitions);
    b_po::store(b_po::parse_command_line(ac, av, cmdloptions), vmgeneral);
    b_po::notify(vmgeneral);
    std::string configfile;
    if(vmgeneral.count("config-file"))
      {
        configfile = vmgeneral["config-file"].as<std::string>();
      }

    b_po::options_description config_file_options;
    config_file_options.add(general).add(processing);//.add(transitions);
    if(configfile.size() > 0 && b_fs::exists(configfile))
      {
        std::ifstream ifs(configfile.c_str());
        store(parse_config_file(ifs, config_file_options), vmgeneral);
        b_po::notify(vmgeneral);
      }
    else if(configfile.size() == 0){
      }
    else
      {
        std::cerr << "Could not find config file." << std::endl;
        exit(0);
      }

    if(!vmgeneral.count("in"))
      {
        std::cerr << "input file is obligatory!" << std::endl;
        std::cerr << cmdloptions << "\n";
        exit(0);
      }

    if(vmgeneral.count("help"))
      {
        std::cerr << cmdloptions << "\n";
        exit(0);
      }
    if(vmgeneral.count("version"))
      {
        std::cerr << "1.0.0.3" << "\n";
        exit(0);
      }
  }
  catch(std::exception& e)
  {
    std::cerr << "error: " << e.what() << "\n";
    exit(0);
  }
  catch(...)
  {
    std::cerr << "Exception of unknown type!\n";
  }
  return 1;
}//end parse command line
